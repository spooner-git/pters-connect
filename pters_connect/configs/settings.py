"""
Django settings for skill_abc project.

Generated by 'django-admin startproject' using Django 1.11.20.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
import pymysql

pymysql.install_as_MySQLdb()

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SKILL_ABC_DJANGO_SECRET", '')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

CORS_ORIGIN_ALLOW_ALL = True
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'oauth2_provider',
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'drf_yasg',
    'apps.account',
    'apps.facility',
    'apps.subject',
    'apps.trainer',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware'
    # 'debug_toolbar.middleware.DebugToolbarMiddleware',
]

INTERNAL_IPS = ('127.0.0.1', 'localhost',)
ROOT_URLCONF = 'configs.urls'

AUTHENTICATION_BACKENDS = (
    # Needed to login by username in Django admin, regardless of `allauth`
    "django.contrib.auth.backends.ModelBackend",
    # If is_active is 0, login will be ok
    'django.contrib.auth.backends.AllowAllUsersModelBackend'
    # `allauth` specific authentication methods, such as login by e-mail
    # "allauth.account.auth_backends.AuthenticationBackend",
)

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'), ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'configs.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'pters-test',
        'USER': os.environ.get("PTERS_DB_USER", ''),
        'PASSWORD': os.environ.get("PTERS_DB_PASSWORD", ''),
        'HOST': os.environ.get("PTERS_DB_HOST", ''),
        'PORT': '3306',
        'OPTIONS': {
            # 'init_command': "SET sql_mode='STRICT_TRANS_TABLES', innodb_strict_mode=1",
            'sql_mode': 'traditional',
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'ko'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_L10N = False                    # if setting -> korean

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

DATETIME_FORMAT = 'Y-m-d H:i:s'     # '2006-10-25 14:30:59'
DATE_FORMAT = 'Y-m-d'
TIME_FORMAT = 'H:i:s'


STATIC_URL = '/static/'

STATICFILES_DIRS = (
  os.path.join(BASE_DIR, "static"),
  'static/',
)
# STATIC_ROOT = 'static/'

# LOGIN URL
LOGIN_URL = 'rest_framework:login'
LOGOUT_URL = 'rest_framework:logout'
# LOGIN_REDIRECT_URL = '/'

OAUTH2_PROVIDER = {
    # this is the list of available scopes
    'SCOPES': {'read': 'Read scope', 'write': 'Write scope', 'groups': 'Access to your groups'},
    # 'ACCESS_TOKEN_EXPIRE_SECONDS': 3*24*60*60
    'ACCESS_TOKEN_EXPIRE_SECONDS': 1*60
}

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,

    'DEFAULT_AUTHENTICATION_CLASSES': (
        # 'rest_framework.authentication.BasicAuthentication',  # enables simple command line authentication
        'rest_framework.authentication.SessionAuthentication',
        # 'rest_framework.authentication.TokenAuthentication',
        'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
}

PTERS_reCAPTCHA_SECRET_KEY = os.environ.get("PTERS_reCAPTCHA_SECRET_KEY", '')
PTERS_SMS_ACTIVATION_MAX_COUNT = 10

PTERS_NAVER_ACCESS_KEY_ID = os.environ.get("PTERS_NAVER_ACCESS_KEY_ID", '')
PTERS_NAVER_SECRET_KEY = os.environ.get("PTERS_NAVER_SECRET_KEY", '')
PTERS_NAVER_SMS_API_KEY_ID = os.environ.get("PTERS_NAVER_SMS_API_KEY_ID", '')
PTERS_NAVER_SMS_SECRET_KEY = os.environ.get("PTERS_NAVER_SMS_SECRET_KEY", '')
PTERS_NAVER_SMS_PHONE_NUMBER = os.environ.get("PTERS_NAVER_SMS_PHONE_NUMBER", '')
SMS_ACTIVATION_SECONDS = 180

PTERS_NAVER_ID_LOGIN_CLIENT_ID = os.environ.get("PTERS_NAVER_ID_LOGIN_CLIENT_ID", '')
PTERS_NAVER_ID_LOGIN_CLIENT_SECRET = os.environ.get("PTERS_NAVER_ID_LOGIN_CLIENT_SECRET", '')


# # AWS S3 Upload
# SKILL_ABC_AWS_ACCESS_KEY_ID = os.environ.get("SKILL_ABC_AWS_ACCESS_KEY_ID", '')
# SKILL_ABC_AWS_SECRET_ACCESS_KEY = os.environ.get("SKILL_ABC_AWS_SECRET_ACCESS_KEY", '')
# SKILL_ABC_AWS_S3_BUCKET_NAME = os.environ.get("SKILL_ABC_AWS_S3_BUCKET_NAME", '')
# AWS_S3_OBJECT_PARAMETERS = {
#     'CacheControl': 'max-age=86400',
# }
#
# SKILL_ABC_BLIZZARD_CLIENT_ID = os.environ.get('SKILL_ABC_BLIZZARD_CLIENT_ID', '')
# SKILL_ABC_BLIZZARD_CLIENT_SECRET = os.environ.get('SKILL_ABC_BLIZZARD_CLIENT_SECRET', '')

LOG_FILE = os.path.join(os.path.dirname(__file__), '..', 'logs/default_log.log')
LOG_FILE_ACCOUNT = os.path.join(os.path.dirname(__file__), '..', 'logs/account_log.log')
LOG_FILE_FACILITY = os.path.join(os.path.dirname(__file__), '..', 'logs/facility_log.log')
LOG_FILE_SUBJECT = os.path.join(os.path.dirname(__file__), '..', 'logs/subject_log.log')
LOG_FILE_TRAINER = os.path.join(os.path.dirname(__file__), '..', 'logs/trainer_log.log')
LOG_FILE_CONFIGS = os.path.join(os.path.dirname(__file__), '..', 'logs/configs_log.log')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s",
            'datefmt': "%d/%b/%Y %H:%M:%S"
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'handlers': {
        'default': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOG_FILE,
            'maxBytes': 1024*1024*5,  # 5 MB
            'formatter': 'verbose',
            'backupCount': 5,
        },
        'account_file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'formatter': 'verbose',
            'filename': LOG_FILE_ACCOUNT,
            'maxBytes': 1024*1024*10,
            'backupCount': 5,
        },
        'facility_file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'formatter': 'verbose',
            'filename': LOG_FILE_FACILITY,
            'maxBytes': 1024*1024*10,
            'backupCount': 5,
        },
        'subject_file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'formatter': 'verbose',
            'filename': LOG_FILE_SUBJECT,
            'maxBytes': 1024*1024*10,
            'backupCount': 5,
        },
        'trainer_file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'formatter': 'verbose',
            'filename': LOG_FILE_TRAINER,
            'maxBytes': 1024*1024*10,
            'backupCount': 5,
        },
        'configs_file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'formatter': 'verbose',
            'filename': LOG_FILE_CONFIGS,
            'maxBytes': 1024*1024*10,
            'backupCount': 5,
        },
    },
    'loggers': {
        '': {
            'handlers': ['default'],
            'propagate': True,
            'level': 'ERROR',
        },
        'django': {
            'handlers': ['default'],
            'propagate': True,
            'level': 'ERROR',
        },
        'django.request': {
            'handlers': ['default'],
            'propagate': False,
            'level': 'ERROR',
        },
        'account': {
            'handlers': ['account_file'],
            'level': 'DEBUG',
        },
        'facility': {
            'handlers': ['facility_file'],
            'level': 'DEBUG',
        },
        'subject': {
            'handlers': ['subject_file'],
            'level': 'DEBUG',
        },
        'trainer': {
            'handlers': ['trainer_file'],
            'level': 'DEBUG',
        },
        'configs': {
            'handlers': ['configs_file'],
            'level': 'DEBUG',
        },
    }
}